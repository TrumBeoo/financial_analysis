"""
Script ƒë·ªÉ crawl tin t·ª©c t·ª´ command line
"""
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import logging
from datetime import datetime
from src.crawler.news_crawler import FinancialNewsCrawler
from src.database.db_manager import DatabaseManager
from src.processing.text_preprocessor import VietnameseTextPreprocessor
from src.processing.sentiment_analyzer import SentimentAnalyzer
from src.models.classifier import NewsClassifier
import pandas as pd

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    """Ch·∫°y crawler v√† l∆∞u v√†o database"""
    
    logger.info("üöÄ B·∫Øt ƒë·∫ßu crawl tin t·ª©c...")
    
    # Kh·ªüi t·∫°o
    crawler = FinancialNewsCrawler()
    db_manager = DatabaseManager()
    preprocessor = VietnameseTextPreprocessor()
    sentiment_analyzer = SentimentAnalyzer()
    
    # Crawl
    df_news = crawler.crawl_all(max_workers=3)
    
    if df_news.empty:
        logger.warning("‚ö†Ô∏è Kh√¥ng crawl ƒë∆∞·ª£c tin t·ª©c n√†o!")
        return
    
    logger.info(f"‚úì Crawl ƒë∆∞·ª£c {len(df_news)} b√†i vi·∫øt")
    
    # L∆∞u d·ªØ li·ªáu g·ªëc
    db_manager.save_news_data(df_news)
    
    # X·ª≠ l√Ω t·ª´ng b√†i
    processed_data = []
    
    for idx, row in df_news.iterrows():
        try:
            full_text = f"{row['title']} {row.get('summary', '')}"
            
            # Preprocess
            processed = preprocessor.preprocess_pipeline(full_text)
            
            # Analyze sentiment
            sentiment = sentiment_analyzer.analyze(full_text)
            
            processed_data.append({
                'source': row['source'],
                'title': row['title'],
                'summary': row.get('summary', ''),
                'link': row['link'],
                'crawl_time': row['crawl_time'],
                'cleaned_text': processed['cleaned_text'],
                'sentiment_positive': sentiment['positive'],
                'sentiment_negative': sentiment['negative'],
                'sentiment_neutral': sentiment['neutral'],
                'predicted_label': sentiment['label'],
                'predicted_sentiment': ['Ti√™u c·ª±c', 'Trung t√≠nh', 'T√≠ch c·ª±c'][sentiment['label']],
                'sectors': ','.join(processed['sectors']),
                'processed_at': datetime.now()
            })
            
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω b√†i {idx}: {e}")
            continue
    
    # L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    if processed_data:
        df_processed = pd.DataFrame(processed_data)
        db_manager.save_processed_data(df_processed)
        logger.info(f"‚úì ƒê√£ x·ª≠ l√Ω v√† l∆∞u {len(df_processed)} b√†i vi·∫øt")
    
    logger.info("‚úÖ Ho√†n th√†nh!")

if __name__ == '__main__':
    main()